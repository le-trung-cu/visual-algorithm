{"version":3,"sources":["graph-algorithms/graph.js","graph-algorithms/dijkstra.js","graph-algorithms/breadth-first-search.js","graph-algorithms/depth-first-search.js","components/graph-visualizer/graph-visualier.component.js","components/graph-visualizer/node/node.component.js","logo.svg","components/sort-visualier/sort-item.component.js","components/sort-visualier/bubble-sort.component.js","components/sort-visualier/insert-sort.component.js","components/sort-visualier/quick-sort.component.js","components/sort-visualier/merge-sort.component.js","components/sort-visualier/sorts.component.js","App.js","serviceWorker.js","index.js"],"names":["createNode","col","row","isStart","isFinish","isVisited","isWall","isShortestPath","getInitialGrid","rows","cols","start","finish","grid","currentRow","push","getGridWallToggled","newGrid","slice","node","newNode","getUnvisitedNeighbors","neighbors","dc","dr","i","cc","rr","length","filter","neighbor","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","distance","Infinity","dijkstra","startNodePosition","finishNodePosition","coverGridForDijkstra","visitedNodesInOrder","newStartNode","newFinishNode","unvisited","nodes","getAllNodes","sort","a","b","shift","updateUnvisitedNeighbors","unvisitedNeighbors","breadthFirstSearch","coverGridFBS","queueVisitedNodes","startNode","nodeNeighbors","depthFirstSearch","coverGridDFS","stacksVisitedNodes","list","pop","GraphVisualier","handleMouseDown","state","startNodeSelected","finishNodeSelected","setState","mouseIsPressed","handleMouseEnter","realTimeAble","getGridForReset","clearImmediate","idRealTimeOut","setImmediate","realTimeGraphVisualizer","handleMouseUp","getCurrentGraphAlgorithm","graphAlgorithmId","nodesVisitedDoc","nodesPathDoc","this","setTimeout","animateShortestPath","document","getElementById","className","querySelectorAll","forEach","classList","remove","currentGraphAlgorithm","console","log","animateNodesVisited","map","visited","onClick","visualizeDijkstra","visualizeBFS","visualizeDFS","rowIdx","key","nodeIdx","onMouseDown","onMouseEnter","onMouseUp","Component","Node","classes","id","module","exports","SortItem","name","children","BubbleSort","props","arr","time","flag","j","x","currentIndex","timeSpan","numbers","isRun","style","display","val","index","height","background","marginRight","title","InsertSort","currentValue","y","iIndex","QuickSort","subSort","left","right","isRand","MergeSort","mid","l","h","Math","floor","merge","arr2","k","Sorts","handleChange","e","value","target","isNaN","parseInt","createRandomArray","count","random","numbersStr","join","handleCreateRandomArr","preventDefault","handleArrayChange","coverToNumber","handleRun","trim","split","num","action","type","width","onChange","htmlFor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a667d159.chunk.js","sourcesContent":["const createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: false,\r\n        isFinish: false,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isShortestPath: false\r\n    }\r\n}\r\n\r\nexport const getInitialGrid = (rows, cols, start = { row: 10, col: 10 }, finish = { row: 10, col: 30 }) => {\r\n    const grid = [];\r\n    for (let row = 0; row < rows; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < cols; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    grid[start.row][start.col].isStart = true;\r\n    grid[finish.row][finish.col].isFinish = true;\r\n\r\n    return grid;\r\n};\r\n\r\nexport const getGridWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n\r\n    return newGrid;\r\n};\r\n\r\nexport const getUnvisitedNeighbors = (grid = [], node) => {\r\n    const neighbors = [];\r\n    const dc = [-1, 1, 0, 0];\r\n    const dr = [0, 0, -1, 1];\r\n    const { col, row } = node;\r\n    for (let i = 0; i < 4; i++) {\r\n        let cc = col + dc[i];\r\n        let rr = row + dr[i];\r\n        if (rr < 0 || cc < 0) continue;\r\n        if (rr >= grid.length || cc >= grid[0].length) continue;\r\n\r\n        neighbors.push(grid[rr][cc]);\r\n    }\r\n    return neighbors.filter(neighbor => !(neighbor.isVisited || neighbor.isWall));\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { getUnvisitedNeighbors, getNodesInShortestPathOrder } from './graph'\r\n\r\nconst createNode = (node) => {\r\n    return {\r\n        ...node,\r\n        distance: Infinity,\r\n        previousNode: null\r\n    }\r\n}\r\n\r\nconst coverGridForDijkstra = (grid) => {\r\n    const newGrid = [];\r\n    for (let row of grid) {\r\n        const currentRow = [];\r\n        for (let node of row) {\r\n            const newNode = createNode(node);\r\n            currentRow.push(newNode);\r\n        }\r\n        newGrid.push(currentRow);\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nexport function dijkstra(grid, startNodePosition, finishNodePosition) {\r\n    const newGrid = coverGridForDijkstra(grid);\r\n    const visitedNodesInOrder = [];\r\n    const newStartNode = newGrid[startNodePosition.row][startNodePosition.col];\r\n    const newFinishNode = newGrid[finishNodePosition.row][finishNodePosition.col];\r\n\r\n    newStartNode.distance = 0;\r\n    const unvisited = getAllNodes(newGrid);\r\n\r\n    while (!!unvisited.length) {\r\n        sortNodesByDistance(unvisited);\r\n        const currentNode = unvisited.shift();\r\n        if (currentNode.isWall) continue;\r\n        currentNode.isVisited = true;\r\n        visitedNodesInOrder.push(currentNode);\r\n        if (currentNode === newFinishNode) break;\r\n        updateUnvisitedNeighbors(newGrid, currentNode);\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(newFinishNode)\r\n    return { visitedNodesInOrder, nodesInShortestPathOrder };\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(grid, node) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(grid, node);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(nodes) {\r\n    nodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nfunction getAllNodes(grid = []) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n","import { getUnvisitedNeighbors, getNodesInShortestPathOrder } from './graph'\r\n\r\n\r\nconst createNode = (node) => {\r\n    return {\r\n        ...node,\r\n        previousNode: null\r\n    }\r\n}\r\n\r\nconst coverGridFBS = (grid) => {\r\n    const newGrid = [];\r\n    for (let row of grid) {\r\n        const currentRow = [];\r\n        for (let node of row) {\r\n            const newNode = createNode(node);\r\n            currentRow.push(newNode);\r\n        }\r\n        newGrid.push(currentRow);\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nexport function breadthFirstSearch(grid, startNodePosition, finishNodePosition) {\r\n    const newGrid = coverGridFBS(grid);\r\n    const visitedNodesInOrder = [];\r\n    const queueVisitedNodes = [];\r\n    const startNode = newGrid[startNodePosition.row][startNodePosition.col];\r\n    const finishNode = newGrid[finishNodePosition.row][finishNodePosition.col];\r\n    visitedNodesInOrder.push(startNode);\r\n    queueVisitedNodes.push(startNode);\r\n    while (!!queueVisitedNodes.length) {\r\n        const currentNode = queueVisitedNodes.shift();\r\n        currentNode.isVisited = true;\r\n        const nodeNeighbors = getUnvisitedNeighbors(newGrid, currentNode);\r\n        for (let neighbor of nodeNeighbors) {\r\n            neighbor.isVisited = true;\r\n            neighbor.previousNode = currentNode;\r\n\r\n            visitedNodesInOrder.push(neighbor);\r\n            queueVisitedNodes.push(neighbor);\r\n\r\n            if (neighbor === finishNode) {\r\n                const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n                return { visitedNodesInOrder, nodesInShortestPathOrder }\r\n            }\r\n        }\r\n    }\r\n    return { visitedNodesInOrder, nodesInShortestPathOrder: [] }\r\n}","import { getUnvisitedNeighbors, getNodesInShortestPathOrder } from './graph'\r\n\r\nconst createNode = (node) => {\r\n    return {\r\n        ...node,\r\n        previousNode: null\r\n    }\r\n}\r\n\r\nconst coverGridDFS = (grid) => {\r\n    const newGrid = [];\r\n    for (let row of grid) {\r\n        const currentRow = [];\r\n        for (let node of row) {\r\n            const newNode = createNode(node);\r\n            currentRow.push(newNode);\r\n        }\r\n        newGrid.push(currentRow);\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nexport function depthFirstSearch(grid, startNodePosition, finishNodePosition) {\r\n    const newGrid = coverGridDFS(grid);\r\n    const visitedNodesInOrder = [];\r\n    const stacksVisitedNodes = [];\r\n    const startNode = newGrid[startNodePosition.row][startNodePosition.col];\r\n    const finishNode = newGrid[finishNodePosition.row][finishNodePosition.col];\r\n\r\n    startNode.isVisited = true;\r\n    visitedNodesInOrder.push(startNode);\r\n    stacksVisitedNodes.push(startNode);\r\n\r\n    while (!!stacksVisitedNodes.length) {\r\n        const currentNode = stacksVisitedNodes[stacksVisitedNodes.length - 1];\r\n        const nodeNeighbors = getUnvisitedNeighbors(newGrid, currentNode);\r\n\r\n        if (!!nodeNeighbors.length) {\r\n            let list = nodeNeighbors;\r\n            list[0].isVisited = true;\r\n            list[0].previousNode = currentNode;\r\n\r\n            visitedNodesInOrder.push(list[0]);\r\n            stacksVisitedNodes.push(list[0]);\r\n            if (list[0] === finishNode) {\r\n                break;\r\n            }\r\n        } else {\r\n            stacksVisitedNodes.pop();\r\n        }\r\n\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    return { visitedNodesInOrder, nodesInShortestPathOrder }\r\n}","import React, { Component } from 'react'\r\nimport Node from './node/node.component'\r\nimport { getInitialGrid, getGridWallToggled, getNodesInShortestPathOrder, getGridStartToggled, getGridFinishToggled } from '../../graph-algorithms/graph'\r\nimport { dijkstra } from '../../graph-algorithms/dijkstra'\r\nimport { breadthFirstSearch } from '../../graph-algorithms/breadth-first-search'\r\n\r\nimport './graph-visualier.styles.css'\r\nimport { depthFirstSearch } from '../../graph-algorithms/depth-first-search'\r\nclass GraphVisualier extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            startNodePosition: { row: 7, col: 7 },\r\n            finishNodePosition: { row: 4, col: 14 },\r\n            startNodeSelected: false,\r\n            finishNodeSelected: false,\r\n            realTimeAble: false,\r\n            graphAlgorithmId: null,\r\n        };\r\n        this.idRealTimeOut = null;\r\n        this.nodesVisitedDoc = [];\r\n        this.nodesPathDoc = [];\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { startNodePosition, finishNodePosition } = this.state;\r\n        const grid = getInitialGrid(20, 30, startNodePosition, finishNodePosition);\r\n        this.setState({ grid });\r\n    }\r\n\r\n    handleMouseDown = (row, col) => {\r\n        const { startNodePosition, finishNodePosition, startNodeSelected, finishNodeSelected } = this.state;\r\n\r\n        if (startNodeSelected || finishNodeSelected) {\r\n            this.setState({ startNodeSelected: false, finishNodeSelected: false });\r\n            return;\r\n        }\r\n        if (startNodePosition.row === row && startNodePosition.col === col) {\r\n            this.setState({ startNodeSelected: true });\r\n            return;\r\n        }\r\n        if (finishNodePosition.row === row && finishNodePosition.col === col) {\r\n            this.setState({ finishNodeSelected: true });\r\n            return;\r\n        }\r\n\r\n        const newGrid = getGridWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n\r\n    handleMouseEnter = (row, col) => {\r\n        const { grid,\r\n            startNodePosition,\r\n            finishNodePosition,\r\n            startNodeSelected,\r\n            finishNodeSelected,\r\n            realTimeAble } = this.state;\r\n        const newGrid = this.getGridForReset(grid);\r\n\r\n        if (startNodeSelected) {\r\n            newGrid[startNodePosition.row][startNodePosition.col].isStart = false;\r\n            newGrid[row][col].isStart = true;\r\n            this.setState({ grid: newGrid, startNodePosition: { row, col } });\r\n            if (realTimeAble) {\r\n                clearImmediate(this.idRealTimeOut);\r\n                this.idRealTimeOut = setImmediate(() => {\r\n                    this.realTimeGraphVisualizer();\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (finishNodeSelected) {\r\n            if (finishNodePosition.row === row && finishNodePosition.col === col) return;\r\n            newGrid[finishNodePosition.row][finishNodePosition.col].isFinish = false;\r\n            newGrid[row][col].isFinish = true;\r\n            this.setState({ grid: newGrid, finishNodePosition: { row, col } });\r\n            if (realTimeAble) {\r\n                clearImmediate(this.idRealTimeOut);\r\n                this.idRealTimeOut = setImmediate(() => {\r\n                    this.realTimeGraphVisualizer();\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!this.state.mouseIsPressed) return;\r\n        newGrid[row][col].isWall = !newGrid[row][col].isWall\r\n        this.setState({ grid: newGrid });\r\n    }\r\n\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({ mouseIsPressed: false });\r\n    }\r\n\r\n    animateNodesVisited(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n\r\n            if (i === visitedNodesInOrder.length - 1) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 20 * i + 1000);\r\n\r\n\r\n                return;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const x = document.getElementById(`node-${node.row}-${node.col}`)\r\n                x.className = 'node animation node--visited';\r\n            }, 20 * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n            if (i == nodesInShortestPathOrder.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState({ realTimeAble: true });\r\n                    let adoc = document.querySelectorAll('.animation');\r\n                    adoc.forEach(a => a.classList.remove('animation'));\r\n                }, 50 * i + 1000);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                const y = document.getElementById(`node-${node.row}-${node.col}`);\r\n                y.className = 'node animation node-shortest-path';\r\n\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n    realTimeGraphVisualizer() {\r\n        const { startNodePosition, finishNodePosition, grid } = this.state;\r\n        const newGrid = this.getGridForReset(grid);\r\n        const currentGraphAlgorithm = this.getCurrentGraphAlgorithm();\r\n        const { visitedNodesInOrder, nodesInShortestPathOrder } = currentGraphAlgorithm(newGrid,\r\n            startNodePosition,\r\n            finishNodePosition);\r\n        console.log(visitedNodesInOrder);\r\n        for (let { row, col } of visitedNodesInOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n        }\r\n\r\n        for (let { row, col } of nodesInShortestPathOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n            newGrid[row][col].isShortestPath = true;\r\n        }\r\n\r\n        this.setState({ grid: newGrid });\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const { startNodePosition, finishNodePosition, grid } = this.state;\r\n        const newGrid = this.getGridForReset(grid);\r\n\r\n        const { visitedNodesInOrder, nodesInShortestPathOrder } = dijkstra(newGrid,\r\n            startNodePosition,\r\n            finishNodePosition);\r\n        console.log(visitedNodesInOrder);\r\n        for (let { row, col } of visitedNodesInOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n        }\r\n\r\n        for (let { row, col } of nodesInShortestPathOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n            newGrid[row][col].isShortestPath = true;\r\n        }\r\n\r\n        this.setState({ grid: newGrid, graphAlgorithmId: 'dijkstra', realTimeAble: false }, () => {\r\n            this.animateNodesVisited(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        });\r\n\r\n    }\r\n\r\n    visualizeBFS() {\r\n        const { startNodePosition, finishNodePosition, grid } = this.state;\r\n        const newGrid = this.getGridForReset(grid);\r\n        const { visitedNodesInOrder, nodesInShortestPathOrder } = breadthFirstSearch(newGrid,\r\n            startNodePosition,\r\n            finishNodePosition);\r\n        console.log(visitedNodesInOrder);\r\n        for (let { row, col } of visitedNodesInOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n        }\r\n\r\n        for (let { row, col } of nodesInShortestPathOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n            newGrid[row][col].isShortestPath = true;\r\n        }\r\n\r\n        this.setState({ grid: newGrid, graphAlgorithmId: 'bfs', realTimeAble: false }, () => {\r\n            this.animateNodesVisited(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        });\r\n    }\r\n\r\n    visualizeDFS() {\r\n        const { startNodePosition, finishNodePosition, grid } = this.state;\r\n        const newGrid = this.getGridForReset(grid);\r\n        const { visitedNodesInOrder, nodesInShortestPathOrder } = depthFirstSearch(newGrid,\r\n            startNodePosition,\r\n            finishNodePosition);\r\n        console.log(visitedNodesInOrder);\r\n        for (let { row, col } of visitedNodesInOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n        }\r\n\r\n        for (let { row, col } of nodesInShortestPathOrder) {\r\n            newGrid[row][col].isVisited = true;\r\n            newGrid[row][col].isShortestPath = true;\r\n        }\r\n\r\n        this.setState({ grid: newGrid, graphAlgorithmId: 'dfs', realTimeAble: false }, () => {\r\n            this.animateNodesVisited(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        });\r\n    }\r\n\r\n    getGridForReset(grid) {\r\n        const newGrid = grid.map(row => row.map(node => {\r\n            if (node.isVisited || node.isShortestPath) {\r\n                return {\r\n                    ...node,\r\n                    isVisited: false,\r\n                    isShortestPath: false\r\n                };\r\n            }\r\n            return node;\r\n        }));\r\n        return newGrid;\r\n    }\r\n\r\n    getCurrentGraphAlgorithm = () => {\r\n        switch (this.state.graphAlgorithmId) {\r\n            case 'dijkstra':\r\n                return (newGrid, startNode, finishNode) => dijkstra(newGrid, startNode, finishNode);\r\n            case 'dfs':\r\n                return (newGrid, startNode, finishNode) => depthFirstSearch(newGrid, startNode, finishNode);\r\n            case 'bfs':\r\n                return (newGrid, startNode, finishNode) => breadthFirstSearch(newGrid, startNode, finishNode);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed, visited, graphAlgorithmId, realTimeAble } = this.state;\r\n        return (\r\n            <div className=\"graph\">\r\n                <h2>graph algorithms</h2>\r\n                <div className=\"graph__header\">\r\n                    <button className={graphAlgorithmId === 'dijkstra' ? 'active' : ''}\r\n                        onClick={() => this.visualizeDijkstra()}>\r\n                        Visualize Dijkstra's Algorithm\r\n                    </button>\r\n                    <button className={graphAlgorithmId === 'bfs' ? 'active' : ''}\r\n                        onClick={() => this.visualizeBFS()}>\r\n                        Visualize BFS Algorithm\r\n                    </button>\r\n                    <button className={graphAlgorithmId === 'dfs' ? 'active' : ''}\r\n                        onClick={() => this.visualizeDFS()}>\r\n                        Visualize DFS Algorithm\r\n                    </button>\r\n                </div>\r\n\r\n                <div className={`grid ${realTimeAble ? 'real-time' : 'animation'}`}>\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div className=\"row\" key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            node={node}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) =>\r\n                                                this.handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        ></Node>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GraphVisualier\r\n","import React from 'react'\r\nimport './node.styles.css'\r\n\r\nconst Node = ({ node,\r\n    onMouseDown, onMouseEnter, onMouseUp }) => {\r\n    const { row, col, isFinish, isStart, isWall, isVisited, isShortestPath } = node;\r\n\r\n    const classes = isFinish ? 'node--finish'\r\n        : isStart ? 'node--start'\r\n            : isWall ? 'node--wall'\r\n                : isShortestPath ? 'node-shortest-path'\r\n                    : isVisited ? 'node--visited' : '';\r\n    return (\r\n        <div id={`node-${row}-${col}`}\r\n            className={`node ${classes}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()} />\r\n    )\r\n}\r\n\r\nexport default Node;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst SortItem = ({ name, children }) => {\n    return (\n        <div className=\"sort__item\">\n            {children}\n            <h3 className=\"sort__name\">{name}</h3>\n        </div>\n    )\n}\n\nexport default SortItem\n","import React, { Component } from 'react'\r\nimport SortItem from './sort-item.component';\r\n\r\nexport class BubbleSort extends Component {\r\n\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      arr: [],//: [9, 8, 7, 6, 5, 4, 3, 2, 1],\r\n      currentIndex: 0\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    const { numbers, isRun } = props;\r\n    this.setState({ arr: [...numbers], isRun }, () => {\r\n      if (isRun) {\r\n        this.sort();\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  sort = () => {\r\n    let arr = [...this.state.arr];\r\n    let time = 0;\r\n    for (let i = 0; i < arr.length - 1; i++) {\r\n      let flag = 0;\r\n      for (let j = 0; j < arr.length - i - 1; j++) {\r\n\r\n        if (arr[j] > arr[j + 1]) {\r\n          [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\r\n          const x = [...arr];\r\n          setTimeout(() => {\r\n            this.setState({ arr: x, currentIndex: j })\r\n          }, time += this.props.timeSpan);\r\n          flag = 1;\r\n        } else {\r\n          setTimeout(() => {\r\n            this.setState({});\r\n          }, time += this.props.timeSpan);\r\n\r\n        }\r\n\r\n      }\r\n      if (flag === 0) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SortItem name='Bubble sort'>\r\n        <div style={{ display: 'flex' }}>\r\n          {\r\n            this.state.arr.map((val, index) => {\r\n              return (\r\n                <span className=\"element\"\r\n                  style={{\r\n                    height: val * 2,\r\n                    background: index > this.state.arr.length - this.state.currentIndex - 1 ? 'yellow' : 'red',\r\n                    marginRight: 10,\r\n                  }} key={index}\r\n                  title={val} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </SortItem>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default BubbleSort\r\n","import React, { Component } from 'react'\r\nimport SortItem from './sort-item.component';\r\n\r\nexport class InsertSort extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      arr: [],//: [9, 8, 7, 6, 5, 4, 3, 2, 1],\r\n      currentIndex: 0,\r\n      iIndex: 1\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    const { numbers, isRun } = props;\r\n    this.setState({ arr: [...numbers], isRun }, () => {\r\n      if (isRun) {\r\n        this.sort();\r\n      }\r\n    });\r\n  }\r\n\r\n  sort = () => {\r\n    let time = 0;\r\n    const { arr } = this.state;\r\n    for (let i = 1; i < arr.length; i++) {\r\n      let currentValue = arr[i];\r\n      let j = i - 1;\r\n      while (j > -1 && arr[j] > currentValue) {\r\n        arr[j + 1] = arr[j];\r\n        let x = [...arr];\r\n        x[j] = 0;\r\n        setTimeout(() => {\r\n          this.setState({ arr: x });\r\n        }, time += this.props.timeSpan);\r\n        j--;\r\n      }\r\n      arr[j + 1] = currentValue;\r\n      let y = [...arr];\r\n      setTimeout(() => {\r\n        this.setState({ arr: y });\r\n      }, time += this.props.timeSpan);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <SortItem name='Insert sort'>\r\n        <div style={{ display: 'flex' }}>\r\n          {\r\n            this.state.arr.map((val, index) => {\r\n              return (\r\n                <span className=\"element\"\r\n                  style={{\r\n                    height: val * 2,\r\n                    background: 'red',\r\n                    marginRight: 10,\r\n                  }} key={index}\r\n                  title={val} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </SortItem>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InsertSort\r\n","import React, { Component } from 'react'\r\nimport SortItem from './sort-item.component';\r\n\r\nexport class QuickSort extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      arr: [],\r\n      left: 0,\r\n      right: 0,\r\n      isRun: false\r\n    }\r\n    this.time = 0;\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.time = 0;\r\n    const { numbers, isRun } = props;\r\n    this.setState({ arr: [...numbers], isRun, left: 0, right: numbers.length }, () => {\r\n      if (isRun) {\r\n        this.sort();\r\n      }\r\n    });\r\n  }\r\n\r\n  sort = () => {\r\n    let arr = [...this.state.arr];\r\n    this.subSort(arr, 0, arr.length);\r\n  }\r\n\r\n  subSort = (a = [], left, right) => {\r\n    setTimeout(() => {\r\n      this.setState({ left, right });\r\n    }, this.time += this.props.timeSpan);\r\n\r\n    if (left >= right) {\r\n      return;\r\n    }\r\n    let i = left, j = right;\r\n    while (i <= j) {\r\n      do {\r\n        i++;\r\n      } while (a[i] <= a[left]);\r\n\r\n      do {\r\n        j--;\r\n      } while (a[j] > a[left]);\r\n      if (i < j) {\r\n        [a[i], a[j]] = [a[j], a[i]];\r\n        const x = [...a];\r\n        setTimeout(() => {\r\n          this.setState({ arr: x });\r\n        }, this.time += this.props.timeSpan);\r\n      }\r\n    }\r\n\r\n    [a[left], a[j]] = [a[j], a[left]];\r\n    const x = [...a];\r\n    setTimeout(() => {\r\n      this.setState({ arr: x, left, right });\r\n    }, this.time += this.props.timeSpan);\r\n    this.subSort(a, left, j);\r\n    this.subSort(a, j + 1, right);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SortItem name='Quick sort'>\r\n        <div style={{ display: 'flex' }}>\r\n          {\r\n            this.state.arr.map((val, index) => {\r\n              let isRand = index >= this.state.left && index <= this.state.right;\r\n              return (\r\n                <div className=\"element\"\r\n                  style={{\r\n                    background: isRand ? 'red' : 'yellow',\r\n                    height: 2 * val,\r\n                    marginRight: 10\r\n                  }} key={index} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </SortItem>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuickSort\r\n","import React, { Component } from 'react'\r\nimport SortItem from './sort-item.component';\r\n\r\nclass MergeSort extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      arr: [],\r\n      left: 0,\r\n      right: 0\r\n    }\r\n    this.time = 0;\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.time = 0;\r\n    const { numbers, isRun } = props;\r\n    this.setState({ arr: [...numbers], isRun, left: 0, right: numbers.length - 1 }, () => {\r\n      if (isRun) {\r\n        this.sort();\r\n      }\r\n    });\r\n  }\r\n\r\n  sort() {\r\n    const { arr } = this.state;\r\n    this.subSort(arr, 0, arr.length - 1);\r\n  }\r\n\r\n  subSort = (arr = [], l, h) => {\r\n    let mid;\r\n    if (l < h) {\r\n      mid = Math.floor((l + h) / 2);\r\n      this.subSort(arr, l, mid);\r\n      this.subSort(arr, mid + 1, h);\r\n\r\n      this.merge(arr, l, mid, h);\r\n    }\r\n\r\n  }\r\n\r\n  merge(arr = [], l, mid, h) {\r\n    let arr2 = [];\r\n    let i = l, j = mid + 1;\r\n    while (i <= mid && j <= h) {\r\n      if (arr[i] < arr[j]) {\r\n        arr2.push(arr[i++]);\r\n      } else {\r\n        arr2.push(arr[j++])\r\n      }\r\n    }\r\n    while (i <= mid) {\r\n      arr2.push(arr[i++]);\r\n    }\r\n\r\n    while (j <= h) {\r\n      arr2.push(arr[j++]);\r\n    }\r\n    for (let k = 0; k < arr2.length; k++) {\r\n      arr[l + k] = arr2[k];\r\n      const x = [...arr];\r\n      setTimeout(() => {\r\n        this.setState({ arr: x, left: l, right: h });\r\n      }, this.time += this.props.timeSpan);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SortItem name='Merge sort'>\r\n        <div style={{ display: 'flex' }}>\r\n          {\r\n            this.state.arr.map((val, index) => {\r\n              let isRand = index >= this.state.left && index <= this.state.right;\r\n              return (\r\n                <div className=\"element\"\r\n                  style={{\r\n                    background: isRand ? 'red' : 'yellow',\r\n                    height: 2 * val,\r\n                    marginRight: 10\r\n                  }} key={index} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </SortItem>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default MergeSort\r\n","import React, { Component } from 'react'\r\nimport BubbleSort from './bubble-sort.component';\r\nimport InsertSort from './insert-sort.component';\r\n// import SelectionSort from './selection-sort.component';\r\nimport { QuickSort } from './quick-sort.component';\r\nimport MergeSort from './merge-sort.component';\r\n\r\nexport class Sorts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      numbersStr: '',//: [9, 8, 7, 6, 5, 4, 3, 2, 1],\r\n      numbers: [],\r\n      count: 15,\r\n      timeSpan: 100,\r\n      isRun: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createRandomArray();\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    let value = e.target.value;\r\n    if (!isNaN(value)) {\r\n      value = parseInt(value);\r\n    }\r\n    let state = {};\r\n    state[e.target.name] = value;\r\n    this.setState({ ...state, isRun: false });\r\n  }\r\n\r\n  createRandomArray = (e) => {\r\n\r\n    let numbers = [];\r\n    for (let i = 0; i < this.state.count; i++) {\r\n      let x = Math.floor(Math.random() * 100 + 1);\r\n      numbers.push(x);\r\n    }\r\n    this.setState({ numbersStr: numbers.join(', '), numbers, isRun: false });\r\n  }\r\n\r\n  handleCreateRandomArr = (e) => {\r\n    e.preventDefault();\r\n    this.createRandomArray();\r\n  }\r\n\r\n  handleArrayChange = (e) => {\r\n    let numbersStr = e.target.value;\r\n    let numbers = this.coverToNumber(numbersStr);\r\n    this.setState({ numbersStr, numbers, isRun: false });\r\n  }\r\n\r\n  handleRun = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ isRun: true });\r\n  }\r\n\r\n  coverToNumber(numbersStr) {\r\n    return numbersStr.trim().split(',').\r\n      filter(num => !isNaN(num.trim()) && num !== '')\r\n      .map(num => parseInt(num));\r\n  }\r\n\r\n  render() {\r\n    const { numbersStr, numbers, isRun, count, timeSpan } = this.state;\r\n    return (\r\n      <div className=\"sort\">\r\n        <h2>sorts algorithms</h2>\r\n        <div className=\"sort__header\">\r\n          <form action=\"\">\r\n\r\n            <label>count:\r\n               <input type=\"number\" name=\"count\"\r\n                style={{\r\n                  display: 'inline-block',\r\n                  width: '56px'\r\n                }}\r\n                value={count}\r\n                onChange={this.handleChange} />\r\n            </label>\r\n            <label htmlFor=\"\">\r\n              time span:\r\n              <input type=\"number\" name=\"timeSpan\"\r\n                style={{\r\n                  display: ' inline-block',\r\n                  width: '51px'\r\n                }}\r\n                value={timeSpan}\r\n                onChange={this.handleChange} />\r\n            </label>\r\n            <button onClick={this.handleCreateRandomArr}>Random array</button>\r\n            <button onClick={this.handleRun}>Run</button>\r\n            <div className=\"txt-arr\">\r\n              <textarea name=\"\" cols=\"30\" rows=\"4\"\r\n                value={numbersStr}\r\n                onChange={this.handleArrayChange} />\r\n\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"sort__list\">\r\n          <BubbleSort numbers={numbers} isRun={isRun} timeSpan={timeSpan} />\r\n          <InsertSort numbers={numbers} isRun={isRun} timeSpan={timeSpan} />\r\n          {/* <div className=\"sort__item\">\r\n            <SelectionSort numbers={numbers} isRun={isRun} timeSpan={timeSpan} />\r\n          </div> */}\r\n          <QuickSort numbers={numbers} isRun={isRun} timeSpan={timeSpan} />\r\n          <MergeSort numbers={numbers} isRun={isRun} timeSpan={timeSpan} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sorts\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Sorts from './components/sort-visualier/sorts.component';\nimport GraphVisualier from './components/graph-visualizer/graph-visualier.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GraphVisualier />\n      <Sorts />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}